
// memoization method 


class Solution {
public:
    
    
 int solve(vector<vector<int>>& grid ,int m,int n, vector<vector<int>>&dp ,int i,int j) {
     
     if(i>=m || j>=n)return 0;
     
     if(i==m-1 && j==n-1)return 1;
     
     if(grid[m-1][n-1]==1)return 0; 
     if(grid[i][j]==1)return 0;
     
    if(dp[i][j]!=-1)return dp[i][j];
     
     int left=0;
     int right=0;
  
       left=solve(grid,m,n,dp,i+1,j);
        right=solve(grid,m,n,dp,i,j+1);
    
     
     return dp[i][j]=left+right;
     
 } 
    
    
    
    
int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        
        int m=grid.size();
        int n=grid[0].size();
        if(grid[0][0])return 0;
        
        vector<vector<int>>dp(m,vector<int>(n,-1));
        
        return (solve(grid,m,n,dp,0,0));
          
        
    }
    
    
};








// tabulation 
/*
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        
        int m=grid.size();
        int n=grid[0].size();
        
       if(grid[0][0])return 0;   
        vector<vector<int>>dp(m,vector<int>(n,0));
        dp[0][0]=1;
          
     for(int i=0;i<m;i++){
         for(int j=0;j<n;j++){
           
             
        if(i==0 && j==0)continue;
           
             if(grid[i][j]==0){
             int left=0;
             int right=0;   
                 
       if(i>0) left=dp[i-1][j];
      
       if(j>0) right=dp[i][j-1];
           
      dp[i][j]=left+right;  
                 
         }
         }
     }
       return dp[m-1][n-1];
        
    }   
};

*/
